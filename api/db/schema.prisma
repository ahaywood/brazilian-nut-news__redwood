datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id                  Int                @id @default(autoincrement())
  email               String             @unique
  nickname            String?            @unique
  firstName           String?
  lastName            String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  twitter             String?
  facebook            String?
  youtube             String?
  linkedin            String?
  github              String?
  links               Link[]
  comments            Comment[]
  favorites           FavoriteLinkUser[]
  commentVotes        CommentUserVote[]
  linkVotes           LinkUserVote[]
}

model Link {
  id            String             @id @default(uuid())
  title         String
  link          String
  submittedBy   User               @relation(fields: [submittedById], references: [id])
  submittedById Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  comments      Comment[]
  favorite      FavoriteLinkUser[]
  linkUserVotes LinkUserVote[]
}

enum VoteDirection {
  UP
  DOWN
}

model LinkUserVote {
  id        Int           @id @default(autoincrement())
  link      Link          @relation(fields: [linkId], references: [id])
  linkId    String
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  direction VoteDirection
  createdAt DateTime      @default(now())

  @@unique(fields: [linkId, userId], name: "vote")
}

model FavoriteLinkUser {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  link      Link     @relation(fields: [linkId], references: [id])
  linkId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [linkId, userId], name: "favorite")
}

model Comment {
  id              String            @id @default(uuid())
  body            String
  link            Link              @relation(fields: [linkId], references: [id])
  linkId          String
  author          User              @relation(fields: [authorId], references: [id])
  authorId        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  parentComment   Comment?          @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[]         @relation("CommentToComment")
  votes           CommentUserVote[]
}

model CommentUserVote {
  id            Int           @id @default(autoincrement())
  comment       Comment       @relation(fields: [commentId], references: [id])
  commentId     String
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  voteDirection VoteDirection
  createdAt     DateTime      @default(now())

  @@unique(fields: [commentId, userId], name: "commentVote")
}
